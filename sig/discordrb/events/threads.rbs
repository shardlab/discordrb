module Discordrb::Events
  # Raised when a thread is created
  class ThreadCreateEvent < Event
    # @return [Channel] the thread in question.
    attr_reader thread: untyped

    def initialize: (untyped data, untyped `bot`) -> void

    def name: () -> ::String
    def server: () -> untyped
    def owner: () -> untyped
    def parent_channel: () -> untyped
    def thread_metadata: () -> untyped
  end

  # Event handler for ChannelCreateEvent
  class ThreadCreateEventHandler < EventHandler
    def matches?: (untyped event) -> (false | untyped)
  end

  # Raised when a thread is updated (e.g. name changes)
  class ThreadUpdateEvent < ThreadCreateEvent
  end

  # Event handler for ThreadUpdateEvent
  class ThreadUpdateEventHandler < ThreadCreateEventHandler
    def matches?: (untyped event) -> (false | untyped)
  end

  # Raised when members are added or removed from a thread.
  class ThreadMembersUpdateEvent < Event
    # @return [Channel]
    attr_reader thread: untyped

    # @return [Array<Member, User>]
    attr_reader added_members: untyped

    # @return [Array<Integer>]
    attr_reader removed_member_ids: untyped

    # @return [Integer]
    attr_reader member_count: untyped

    def initialize: (untyped data, untyped `bot`) -> void
  end

  # Event handler for ThreadMembersUpdateEvent
  class ThreadMembersUpdateEventHandler < ThreadCreateEventHandler
    def matches?: (untyped event) -> (false | untyped)
  end
end
