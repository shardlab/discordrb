# Discord voice chat support
module Discordrb::Voice
  # This class conveniently abstracts opus and ffmpeg/avconv, for easy implementation of voice sending. It's not very
  # useful for most users, but I guess it can be useful sometimes.
  class Encoder
    # Whether or not avconv should be used instead of ffmpeg. If possible, it is recommended to use ffmpeg instead,
    # as it is better supported.
    # @return [true, false] whether avconv should be used instead of ffmpeg.
    attr_accessor use_avconv: untyped

    # @see VoiceBot#filter_volume=
    # @return [Integer] the volume used as a filter to ffmpeg/avconv.
    attr_accessor filter_volume: untyped

    # Create a new encoder
    def initialize: () -> void

    # Set the opus encoding bitrate
    # @param value [Integer] The new bitrate to use, in bits per second (so 64000 if you want 64 kbps)
    def bitrate=: (untyped value) -> untyped

    # Encodes the given buffer using opus.
    # @param buffer [String] An unencoded PCM (s16le) buffer.
    # @return [String] A buffer encoded using opus.
    def encode: (untyped buffer) -> untyped

    # One frame of complete silence Opus encoded
    OPUS_SILENCE: untyped

    # Adjusts the volume of a given buffer of s16le PCM data.
    # @param buf [String] An unencoded PCM (s16le) buffer.
    # @param mult [Float] The volume multiplier, 1 for same volume.
    # @return [String] The buffer with adjusted volume, s16le again
    def adjust_volume: (untyped buf, untyped mult) -> (nil | untyped)

    # Encodes a given file (or rather, decodes it) using ffmpeg. This accepts pretty much any format, even videos with
    # an audio track. For a list of supported formats, see https://ffmpeg.org/general.html#Audio-Codecs. It even accepts
    # URLs, though encoding them is pretty slow - I recommend to make a stream of it and then use {#encode_io} instead.
    # @param file [String] The path or URL to encode.
    # @param options [String] ffmpeg options to pass after the -i flag
    # @return [IO] the audio, encoded as s16le PCM
    def encode_file: (untyped file, ?::String options) -> untyped

    # Encodes an arbitrary IO audio stream using ffmpeg. Accepts pretty much any media format, even videos with audio
    # tracks. For a list of supported audio formats, see https://ffmpeg.org/general.html#Audio-Codecs.
    # @param io [IO] The stream to encode.
    # @param options [String] ffmpeg options to pass after the -i flag
    # @return [IO] the audio, encoded as s16le PCM
    def encode_io: (untyped io, ?::String options) -> untyped

    private

    def ffmpeg_command: () -> ("avconv" | "ffmpeg")

    def filter_volume_argument: () -> ("" | untyped)
  end
end
