module Discordrb
  # This mixin module does caching stuff for the library. It conveniently separates the logic behind
  # the caching (like, storing the user hashes or making API calls to retrieve things) from the Bot that
  # actually uses it.
  module Cache
    # Initializes this cache
    def init_cache: () -> untyped

    # Returns or caches the available voice regions
    def voice_regions: () -> untyped

    # Gets a channel given its ID. This queries the internal channel cache, and if the channel doesn't
    # exist in there, it will get the data from Discord.
    # @param id [Integer] The channel ID for which to search for.
    # @param server [Server] The server for which to search the channel for. If this isn't specified, it will be
    #   inferred using the API
    # @return [Channel, nil] The channel identified by the ID.
    # @raise Discordrb::Errors::NoPermission
    def channel: (untyped id, ?untyped? server) -> (untyped | nil)

    alias group_channel channel

    # Gets a user by its ID.
    # @note This can only resolve users known by the bot (i.e. that share a server with the bot).
    # @param id [Integer] The user ID that should be resolved.
    # @return [User, nil] The user identified by the ID, or `nil` if it couldn't be found.
    def user: (untyped id) -> (untyped | nil)

    # Gets a server by its ID.
    # @note This can only resolve servers the bot is currently in.
    # @param id [Integer] The server ID that should be resolved.
    # @return [Server, nil] The server identified by the ID, or `nil` if it couldn't be found.
    def server: (untyped id) -> (untyped | nil)

    # Gets a member by both IDs, or `Server` and user ID.
    # @param server_or_id [Server, Integer] The `Server` or server ID for which a member should be resolved
    # @param user_id [Integer] The ID of the user that should be resolved
    # @return [Member, nil] The member identified by the IDs, or `nil` if none could be found
    def member: (untyped server_or_id, untyped user_id) -> (untyped | nil)

    # Creates a PM channel for the given user ID, or if one exists already, returns that one.
    # It is recommended that you use {User#pm} instead, as this is mainly for internal use. However,
    # usage of this method may be unavoidable if only the user ID is known.
    # @param id [Integer] The user ID to generate a private channel for.
    # @return [Channel] A private channel for that user.
    def pm_channel: (untyped id) -> untyped

    alias private_channel pm_channel

    # Ensures a given user object is cached and if not, cache it from the given data hash.
    # @param data [Hash] A data hash representing a user.
    # @return [User] the user represented by the data hash.
    def ensure_user: (untyped data) -> untyped

    # Ensures a given server object is cached and if not, cache it from the given data hash.
    # @param data [Hash] A data hash representing a server.
    # @param force_cache [true, false] Whether the object in cache should be updated with the given
    #   data if it already exists.
    # @return [Server] the server represented by the data hash.
    def ensure_server: (untyped data, ?bool force_cache) -> untyped

    # Ensures a given channel object is cached and if not, cache it from the given data hash.
    # @param data [Hash] A data hash representing a channel.
    # @param server [Server, nil] The server the channel is on, if known.
    # @return [Channel] the channel represented by the data hash.
    def ensure_channel: (untyped data, ?untyped? server) -> untyped

    # Ensures a given thread member object is cached.
    # @param data [Hash] Thread member data.
    def ensure_thread_member: (untyped data) -> untyped

    # Requests member chunks for a given server ID.
    # @param id [Integer] The server ID to request chunks for.
    def request_chunks: (untyped id) -> untyped

    # Gets the code for an invite.
    # @param invite [String, Invite] The invite to get the code for. Possible formats are:
    #
    #    * An {Invite} object
    #    * The code for an invite
    #    * A fully qualified invite URL (e.g. `https://discord.com/invite/0A37aN7fasF7n83q`)
    #    * A short invite URL with protocol (e.g. `https://discord.gg/0A37aN7fasF7n83q`)
    #    * A short invite URL without protocol (e.g. `discord.gg/0A37aN7fasF7n83q`)
    # @return [String] Only the code for the invite.
    def resolve_invite_code: (untyped invite) -> untyped

    # Gets information about an invite.
    # @param invite [String, Invite] The invite to join. For possible formats see {#resolve_invite_code}.
    # @return [Invite] The invite with information about the given invite URL.
    def invite: (untyped invite) -> untyped

    # Finds a channel given its name and optionally the name of the server it is in.
    # @param channel_name [String] The channel to search for.
    # @param server_name [String] The server to search for, or `nil` if only the channel should be searched for.
    # @param type [Integer, nil] The type of channel to search for (0: text, 1: private, 2: voice, 3: group), or `nil` if any type of
    #   channel should be searched for
    # @return [Array<Channel>] The array of channels that were found. May be empty if none were found.
    def find_channel: (untyped channel_name, ?untyped? server_name, ?type: untyped?) -> (::Array[untyped] | untyped)

    # Finds a user given its username or username & discriminator.
    # @overload find_user(username)
    #   Find all cached users with a certain username.
    #   @param username [String] The username to look for.
    #   @return [Array<User>] The array of users that were found. May be empty if none were found.
    # @overload find_user(username, discrim)
    #   Find a cached user with a certain username and discriminator.
    #   Find a user by name and discriminator
    #   @param username [String] The username to look for.
    #   @param discrim [String] The user's discriminator
    #   @return [User, nil] The user that was found, or `nil` if none was found
    # @note This method only searches through users that have been cached. Users that have not yet been cached
    #   by the bot but still share a connection with the user (mutual server) will not be found.
    # @example Find users by name
    #   bot.find_user('z64') #=> Array<User>
    # @example Find a user by name and discriminator
    #   bot.find_user('z64', '2639') #=> User
    def find_user: (untyped username, ?untyped? discrim) -> untyped
  end
end
