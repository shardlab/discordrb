module Discordrb
  # Contains information about user activities such as the game they are playing,
  # music they are listening to, or their live stream.
  class Activity
    # Values corresponding to the flags bitmask
    FLAGS: ::Hash[::Symbol, ::Integer]

    # @return [String] the activity's name
    attr_reader name: ::String

    # @return [Integer, nil] activity type. Can be {GAME}, {STREAMING}, {LISTENING}, {CUSTOM}, or {COMPETING}
    attr_reader type: ::Integer?

    # @return [String, nil] stream URL, when the activity type is {STREAMING}
    attr_reader url: ::String?

    # @return [String, nil] the application ID for the game
    attr_reader application_id: ::String

    # @return [String, nil] details about what the player is currently doing
    attr_reader details: ::String?

    # @return [String, nil] the user's current party status
    attr_reader state: ::String?

    # @return [true, false] whether or not the activity is an instanced game session
    attr_reader instance: bool

    # @return [Integer] a bitmask of activity flags
    # @see FLAGS
    attr_reader flags: ::Integer

    # @return [Timestamps, nil] times for the start and/or end of the activity
    attr_reader timestamps: Timestamps?

    # @return [Secrets, nil] secrets for rich presence, joining, and spectating
    attr_reader secrets: Secrets?

    # @return [Assets, nil] images for the presence and their texts
    attr_reader assets: Assets?

    # @return [Party, nil] information about the player's current party
    attr_reader party: Party?

    # @return [Emoji, nil] emoji data for custom statuses
    attr_reader emoji: Discordrb::Emoji?

    # @return [Time] the time when the activity was added to the user's session
    attr_reader created_at: ::Time

    # Type indicating the activity is for a game
    GAME: 0

    # Type indicating the activity is a stream
    STREAMING: 1

    # Type indicating the activity is for music
    LISTENING: 2

    # This type is currently unused in the client but can be reported by bots
    WATCHING: 3

    # Type indicating the activity is a custom status
    CUSTOM: 4

    # Type indicating the activity is for a competitive game
    COMPETING: 5

    # @!visibility private
    def initialize: (::Hash[::String, untyped] data, Discordrb::Bot bot) -> void

    # @return [true, false] Whether or not the `join` flag is set for this activity
    def join?: () -> bool

    # @return [true, false] Whether or not the `spectate` flag is set for this activity
    def spectate?: () -> bool

    # @return [true, false] Whether or not the `join_request` flag is set for this activity
    def join_request?: () -> bool

    # @return [true, false] Whether or not the `sync` flag is set for this activity
    def sync?: () -> bool

    # @return [true, false] Whether or not the `play` flag is set for this activity
    def play?: () -> bool

    # @return [true, false] Whether or not the `instance` flag is set for this activity
    def instance?: () -> bool

    # @!visibility private
    def flag_set?: (::Symbol sym) -> bool

    # Timestamps for the start and end of instanced activities
    class Timestamps
      # @return [Time, nil]
      attr_reader start: ::Time?

      # @return [Time, nil]
      attr_reader end: ::Time?

      # @!visibility private
      def initialize: (::Hash[::String, untyped] data) -> void
    end

    # Contains secrets used for rich presence
    class Secrets
      # @return [String, nil] secret for joining a party
      attr_reader join: ::String?

      # @return [String, nil] secret for spectating
      attr_reader spectate: ::String?

      # @return [String, nil] secret for a specific instanced match
      attr_reader match: ::String?

      # @!visibility private
      def initialize: (::Hash[::String, untyped] data) -> void
    end

    # Assets for rich presence images and hover text
    class Assets
      # @return [String, nil] the asset ID for the large image of this activity
      attr_reader large_image_id: ::String?

      # @return [String, nil] text displayed when hovering over the large iamge
      attr_reader large_text: ::String?

      # @return [String, nil] the asset ID for the small image of this activity
      attr_reader small_image_id: ::String?

      # @return [String, nil]
      attr_reader small_text: ::String?

      # @return [String, nil] the application ID for these assets.
      attr_reader application_id: ::String?

      # @!visibility private
      def initialize: (::Hash[::String, untyped] data, ::String application_id) -> void

      # Utility function to get an Asset's large image URL.
      # @param format [String, nil] If `nil`, the URL will default to `webp`. You can otherwise specify one of `webp`, `jpg`, or `png`.
      # @return [String] the URL to the large image asset.
      def large_image_url: (?::String format) -> ::String

      # Utility function to get an Asset's large image URL.
      # @param format [String, nil] If `nil`, the URL will default to `webp`. You can otherwise specify one of `webp`, `jpg`, or `png`.
      # @return [String] the URL to the small image asset.
      def small_image_url: (?::String format) -> ::String
    end

    # Contains information about an activity's party
    class Party
      # @return [String, nil]
      attr_reader id: ::String?

      # @return [Integer, nil]
      attr_reader current_size: ::Integer?

      # @return [Integer, nil]
      attr_reader max_size: ::Integer?

      # @!visibility private
      def initialize: (::Hash[::String, untyped] data) -> void
    end
  end

  # A collection of the user's activities.
  class ActivitySet
    include Enumerable[Activity]

    @activities: ::Array[Activity]

    # @!visibility private
    def initialize: (?::Array[Activity] activities) -> void

    # @!visibility private
    # Implement each for Enumerable
    def each: () { (Activity) -> void } -> ::Array[Activity]

    # @return [Array<Activity>] all activities
    def to_a: () -> ::Array[Activity]

    # @return [Array<Activity>] all activities of type {Activity::GAME}
    def games: () -> ::Array[Activity]

    # @return [Array<Activity>] all activities of type {Activity::STREAMING}
    def streaming: () -> ::Array[Activity]

    # @return [Array<Activity>] all activities of type {Activity::LISTENING}
    def listening: () -> ::Array[Activity]

    # @return [Array<Activity>] all activities of type {Activity::WATCHING}
    def watching: () -> ::Array[Activity]

    # @return [Array<Activity>] all activities of type {Activity::CUSTOM}
    def custom_status: () -> ::Array[Activity]

    # @return [Array<Activity>] all activities of type {Activity::COMPETING}
    def competing: () -> ::Array[Activity]
  end
end
