module Discordrb
  # A permissions overwrite, when applied to channels describes additional
  # permissions a member needs to perform certain actions in context.
  class Overwrite
    # Types of overwrites mapped to their API value.
    TYPES: { role: 0, member: 1 }

    # @return [Integer] ID of the thing associated with this overwrite type
    attr_accessor id: untyped

    # @return [Symbol] either :role or :member
    attr_accessor type: untyped

    # @return [Permissions] allowed permissions for this overwrite type
    attr_accessor allow: untyped

    # @return [Permissions] denied permissions for this overwrite type
    attr_accessor deny: untyped

    # Creates a new Overwrite object
    # @example Create an overwrite for a role that can mention everyone, send TTS messages, but can't create instant invites
    #   allow = Discordrb::Permissions.new
    #   allow.can_mention_everyone = true
    #   allow.can_send_tts_messages = true
    #
    #   deny = Discordrb::Permissions.new
    #   deny.can_create_instant_invite = true
    #
    #   # Find some role by name
    #   role = server.roles.find { |r| r.name == 'some role' }
    #
    #   Overwrite.new(role, allow: allow, deny: deny)
    # @example Create an overwrite by ID and permissions bits
    #   Overwrite.new(120571255635181568, type: 'member', allow: 1024, deny: 0)
    # @param object [Integer, #id] the ID or object this overwrite is for
    # @param type [String, Symbol, Integer] the type of object this overwrite is for (only required if object is an Integer)
    # @param allow [String, Integer, Permissions] allowed permissions for this overwrite, by bits or a Permissions object
    # @param deny [String, Integer, Permissions] denied permissions for this overwrite, by bits or a Permissions object
    # @raise [ArgumentError] if type is not :member or :role
    def initialize: (?untyped? object, ?type: untyped?, ?allow: ::Integer, ?deny: ::Integer) -> void

    # Comparison by attributes [:id, :type, :allow, :deny]
    def ==: (untyped other) -> untyped

    # @return [Overwrite] create an overwrite from a hash payload
    # @!visibility private
    def self.from_hash: (untyped data) -> untyped

    # @return [Overwrite] copies an overwrite from another Overwrite
    # @!visibility private
    def self.from_other: (untyped other) -> untyped

    # @return [Hash] hash representation of an overwrite
    # @!visibility private
    def to_hash: () -> { id: untyped, type: untyped, allow: untyped, deny: untyped }
  end
end
