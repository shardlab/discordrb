module Discordrb
  # Basic attributes a server should have
  module ServerAttributes
    # @return [String] this server's name.
    attr_reader name: untyped

    # @return [String] the hexadecimal ID used to identify this server's icon.
    attr_reader icon_id: untyped

    # Utility function to get the URL for the icon image
    # @return [String] the URL to the icon image
    def icon_url: () -> (nil | untyped)
  end

  # A server on Discord
  class Server
    include IDObject

    include ServerAttributes

    # @return [String] the ID of the region the server is on (e.g. `amsterdam`).
    attr_reader region_id: untyped

    # @return [Array<Channel>] an array of all the channels (text and voice) on this server.
    attr_reader channels: untyped

    # @return [Array<Role>] an array of all the roles created on this server.
    attr_reader roles: untyped

    # @return [Hash<Integer => Emoji>] a hash of all the emoji available on this server.
    attr_reader emoji: untyped

    alias emojis emoji

    # @return [true, false] whether or not this server is large (members > 100). If it is,
    # it means the members list may be inaccurate for a couple seconds after starting up the bot.
    attr_reader large: untyped

    alias large? large

    # @return [Array<Symbol>] the features of the server (eg. "INVITE_SPLASH")
    attr_reader features: untyped

    # @return [Integer] the absolute number of members on this server, offline or not.
    attr_reader member_count: untyped

    # @return [Integer] the amount of time after which a voice user gets moved into the AFK channel, in seconds.
    attr_reader afk_timeout: untyped

    # @return [Hash<Integer => VoiceState>] the hash (user ID => voice state) of voice states of members on this server
    attr_reader voice_states: untyped

    # The server's amount of Nitro boosters.
    # @return [Integer] the amount of boosters, 0 if no one has boosted.
    attr_reader booster_count: untyped

    # The server's Nitro boost level.
    # @return [Integer] the boost level, 0 if no level.
    attr_reader boost_level: untyped

    # @!visibility private
    def initialize: (untyped data, untyped `bot`) -> void

    # @return [Member] The server owner.
    def owner: () -> untyped

    # The default channel is the text channel on this server with the highest position
    # that the bot has Read Messages permission on.
    # @param send_messages [true, false] whether to additionally consider if the bot has Send Messages permission
    # @return [Channel, nil] The default channel on this server, or `nil` if there are no channels that the bot can read.
    def default_channel: (?bool send_messages) -> untyped

    alias general_channel default_channel

    # @return [Role] The @everyone role on this server
    def everyone_role: () -> untyped

    # Gets a role on this server based on its ID.
    # @param id [String, Integer] The role ID to look for.
    # @return [Role, nil] The role identified by the ID, or `nil` if it couldn't be found.
    def role: (untyped id) -> untyped

    # Gets a member on this server based on user ID
    # @param id [Integer] The user ID to look for
    # @param request [true, false] Whether the member should be requested from Discord if it's not cached
    def member: (untyped id, ?bool request) -> untyped

    # @return [Array<Member>] an array of all the members on this server.
    # @raise [RuntimeError] if the bot was not started with the :server_member intent
    def members: () -> untyped

    alias users members

    # @return [Array<Member>] an array of all the bot members on this server.
    def bot_members: () -> untyped

    # @return [Array<Member>] an array of all the non bot members on this server.
    def non_bot_members: () -> untyped

    # @return [Member] the bot's own `Member` on this server
    def bot: () -> untyped

    # @return [Array<Integration>] an array of all the integrations connected to this server.
    def integrations: () -> untyped

    # @param action [Symbol] The action to only include.
    # @param user [User, String, Integer] The user, or their ID, to filter entries to.
    # @param limit [Integer] The amount of entries to limit it to.
    # @param before [Entry, String, Integer] The entry, or its ID, to use to not include all entries after it.
    # @return [AuditLogs] The server's audit logs.
    def audit_logs: (?action: untyped?, ?user: untyped?, ?limit: ::Integer, ?before: untyped?) -> untyped

    # Cache @widget
    # @note For internal use only
    # @!visibility private
    def cache_widget_data: () -> untyped

    # @return [true, false] whether or not the server has widget enabled
    def widget_enabled?: () -> untyped

    alias widget? widget_enabled?

    alias embed_enabled widget_enabled?

    alias embed? widget_enabled?

    # @return [Channel, nil] the channel the server widget will make an invite for.
    def widget_channel: () -> untyped

    alias embed_channel widget_channel

    # Sets whether this server's widget is enabled
    # @param value [true, false]
    def widget_enabled=: (untyped value) -> untyped

    alias embed_enabled= widget_enabled=

    # Sets whether this server's widget is enabled
    # @param value [true, false]
    # @param reason [String, nil] the reason to be shown in the audit log for this action
    def set_widget_enabled: (untyped value, ?untyped? reason) -> untyped

    alias set_embed_enabled set_widget_enabled

    # Changes the channel on the server's widget
    # @param channel [Channel, String, Integer] the channel, or its ID, to be referenced by the widget
    def widget_channel=: (untyped channel) -> untyped

    alias embed_channel= widget_channel=

    # Changes the channel on the server's widget
    # @param channel [Channel, String, Integer] the channel, or its ID, to be referenced by the widget
    # @param reason [String, nil] the reason to be shown in the audit log for this action
    def set_widget_channel: (untyped channel, ?untyped? reason) -> untyped

    alias set_embed_channel set_widget_channel

    # Changes the channel on the server's widget, and sets whether it is enabled.
    # @param enabled [true, false] whether the widget is enabled
    # @param channel [Channel, String, Integer] the channel, or its ID, to be referenced by the widget
    # @param reason [String, nil] the reason to be shown in the audit log for this action
    def modify_widget: (untyped enabled, untyped channel, ?untyped? reason) -> untyped

    alias modify_embed modify_widget

    # @param include_idle [true, false] Whether to count idle members as online.
    # @param include_bots [true, false] Whether to include bot accounts in the count.
    # @return [Array<Member>] an array of online members on this server.
    def online_members: (?include_idle: bool, ?include_bots: bool) -> untyped

    alias online_users online_members

    # Adds a member to this guild that has granted this bot's application an OAuth2 access token
    # with the `guilds.join` scope.
    # For more information about Discord's OAuth2 implementation, see: https://discord.com/developers/docs/topics/oauth2
    # @note Your bot must be present in this server, and have permission to create instant invites for this to work.
    # @param user [User, String, Integer] the user, or ID of the user to add to this server
    # @param access_token [String] the OAuth2 Bearer token that has been granted the `guilds.join` scope
    # @param nick [String] the nickname to give this member upon joining
    # @param roles [Role, Array<Role, String, Integer>] the role (or roles) to give this member upon joining
    # @param deaf [true, false] whether this member will be server deafened upon joining
    # @param mute [true, false] whether this member will be server muted upon joining
    # @return [Member, nil] the created member, or `nil` if the user is already a member of this server.
    def add_member_using_token: (untyped user, untyped access_token, ?nick: untyped?, ?roles: untyped, ?deaf: bool, ?mute: bool) -> (nil | untyped)

    # Returns the amount of members that are candidates for pruning
    # @param days [Integer] the number of days to consider for inactivity
    # @return [Integer] number of members to be removed
    # @raise [ArgumentError] if days is not between 1 and 30 (inclusive)
    def prune_count: (untyped days) -> untyped

    # Prunes (kicks) an amount of members for inactivity
    # @param days [Integer] the number of days to consider for inactivity (between 1 and 30)
    # @param reason [String] The reason the for the prune.
    # @return [Integer] the number of members removed at the end of the operation
    # @raise [ArgumentError] if days is not between 1 and 30 (inclusive)
    def begin_prune: (untyped days, ?untyped? reason) -> untyped

    alias prune begin_prune

    # @return [Array<Channel>] an array of text channels on this server
    def text_channels: () -> untyped

    # @return [Array<Channel>] an array of voice channels on this server
    def voice_channels: () -> untyped

    # @return [Array<Channel>] an array of category channels on this server
    def categories: () -> untyped

    # @return [Array<Channel>] an array of channels on this server that are not in a category
    def orphan_channels: () -> untyped

    # @return [String, nil] the widget URL to the server that displays the amount of online members in a
    #   stylish way. `nil` if the widget is not enabled.
    def widget_url: () -> (nil | untyped)

    # @param style [Symbol] The style the picture should have. Possible styles are:
    #   * `:banner1` creates a rectangular image with the server name, member count and icon, a "Powered by Discord" message on the bottom and an arrow on the right.
    #   * `:banner2` creates a less tall rectangular image that has the same information as `banner1`, but the Discord logo on the right - together with the arrow and separated by a diagonal separator.
    #   * `:banner3` creates an image similar in size to `banner1`, but it has the arrow in the bottom part, next to the Discord logo and with a "Chat now" text.
    #   * `:banner4` creates a tall, almost square, image that prominently features the Discord logo at the top and has a "Join my server" in a pill-style button on the bottom. The information about the server is in the same format as the other three `banner` styles.
    #   * `:shield` creates a very small, long rectangle, of the style you'd find at the top of GitHub `README.md` files. It features a small version of the Discord logo at the left and the member count at the right.
    # @return [String, nil] the widget banner URL to the server that displays the amount of online members,
    #   server icon and server name in a stylish way. `nil` if the widget is not enabled.
    def widget_banner_url: (untyped style) -> (nil | untyped)

    # @return [String] the hexadecimal ID used to identify this server's splash image for their VIP invite page.
    def splash_id: () -> untyped

    alias splash_hash splash_id

    # @return [String, nil] the splash image URL for the server's VIP invite page.
    #   `nil` if there is no splash image.
    def splash_url: () -> (nil | untyped)

    # @return [String] the hexadecimal ID used to identify this server's banner image, shown by the server name.
    def banner_id: () -> untyped

    # @return [String, nil] the banner image URL for the server's banner image, or
    #   `nil` if there is no banner image.
    def banner_url: () -> (nil | untyped)

    # @return [String] a URL that a user can use to navigate to this server in the client
    def link: () -> ::String

    alias jump_link link

    # Adds a role to the role cache
    # @note For internal use only
    # @!visibility private
    def add_role: (untyped role) -> untyped

    # Removes a role from the role cache
    # @note For internal use only
    # @!visibility private
    def delete_role: (untyped role_id) -> untyped

    # Updates the positions of all roles on the server
    # @note For internal use only
    # @!visibility private
    def update_role_positions: (untyped role_positions) -> untyped

    # Adds a member to the member cache.
    # @note For internal use only
    # @!visibility private
    def add_member: (untyped member) -> untyped

    # Removes a member from the member cache.
    # @note For internal use only
    # @!visibility private
    def delete_member: (untyped user_id) -> untyped

    # Checks whether a member is cached
    # @note For internal use only
    # @!visibility private
    def member_cached?: (untyped user_id) -> untyped

    # Adds a member to the cache
    # @note For internal use only
    # @!visibility private
    def cache_member: (untyped member) -> untyped

    # Updates a member's voice state
    # @note For internal use only
    # @!visibility private
    def update_voice_state: (untyped data) -> untyped

    # Creates a channel on this server with the given name.
    # @note If parent is provided, permission overwrites have the follow behavior:
    #
    #  1. If overwrites is null, the new channel inherits the parent's permissions.
    #  2. If overwrites is [], the new channel inherits the parent's permissions.
    #  3. If you supply one or more overwrites, the channel will be created with those permissions and ignore the parents.
    #
    # @param name [String] Name of the channel to create
    # @param type [Integer, Symbol] Type of channel to create (0: text, 2: voice, 4: category, 5: news, 6: store)
    # @param topic [String] the topic of this channel, if it will be a text channel
    # @param bitrate [Integer] the bitrate of this channel, if it will be a voice channel
    # @param user_limit [Integer] the user limit of this channel, if it will be a voice channel
    # @param permission_overwrites [Array<Hash>, Array<Overwrite>] permission overwrites for this channel
    # @param parent [Channel, String, Integer] parent category, or its ID, for this channel to be created in.
    # @param nsfw [true, false] whether this channel should be created as nsfw
    # @param rate_limit_per_user [Integer] how many seconds users need to wait in between messages.
    # @param reason [String] The reason the for the creation of this channel.
    # @return [Channel] the created channel.
    # @raise [ArgumentError] if type is not 0 (text), 2 (voice), 4 (category), 5 (news), or 6 (store)
    def create_channel: (untyped name, ?::Integer `type`, ?topic: untyped?, ?bitrate: untyped?, ?user_limit: untyped?, ?permission_overwrites: untyped?, ?parent: untyped?, ?nsfw: bool, ?rate_limit_per_user: untyped?, ?position: untyped?, ?reason: untyped?) -> untyped

    # Creates a role on this server which can then be modified. It will be initialized
    # with the regular role defaults the client uses unless specified, i.e. name is "new role",
    # permissions are the default, colour is the default etc.
    # @param name [String] Name of the role to create
    # @param colour [Integer, ColourRGB, #combined] The roles colour
    # @param hoist [true, false]
    # @param mentionable [true, false]
    # @param permissions [Integer, Array<Symbol>, Permissions, #bits] The permissions to write to the new role.
    # @param reason [String] The reason the for the creation of this role.
    # @return [Role] the created role.
    def create_role: (?name: ::String, ?colour: ::Integer, ?hoist: bool, ?mentionable: bool, ?permissions: ::Integer, ?reason: untyped?) -> untyped

    # Adds a new custom emoji on this server.
    # @param name [String] The name of emoji to create.
    # @param image [String, #read] A base64 encoded string with the image data, or an object that responds to `#read`, such as `File`.
    # @param roles [Array<Role, String, Integer>] An array of roles, or role IDs to be whitelisted for this emoji.
    # @param reason [String] The reason the for the creation of this emoji.
    # @return [Emoji] The emoji that has been added.
    def add_emoji: (untyped name, untyped image, ?untyped roles, ?reason: untyped?) -> untyped

    # Delete a custom emoji on this server
    # @param emoji [Emoji, String, Integer] The emoji or emoji ID to be deleted.
    # @param reason [String] The reason the for the deletion of this emoji.
    def delete_emoji: (untyped emoji, ?reason: untyped?) -> untyped

    # Changes the name and/or role whitelist of an emoji on this server.
    # @param emoji [Emoji, String, Integer] The emoji or emoji ID to edit.
    # @param name [String] The new name for the emoji.
    # @param roles [Array<Role, String, Integer>] A new array of roles, or role IDs, to whitelist.
    # @param reason [String] The reason for the editing of this emoji.
    # @return [Emoji] The edited emoji.
    def edit_emoji: (untyped emoji, ?name: untyped?, ?roles: untyped?, ?reason: untyped?) -> untyped

    # The amount of emoji the server can have, based on its current Nitro Boost Level.
    # @return [Integer] the max amount of emoji
    def max_emoji: () -> untyped

    # @return [Array<ServerBan>] a list of banned users on this server and the reason they were banned.
    def bans: () -> untyped

    # Bans a user from this server.
    # @param user [User, String, Integer] The user to ban.
    # @param message_days [Integer] How many days worth of messages sent by the user should be deleted.
    # @param reason [String] The reason the user is being banned.
    def ban: (untyped user, ?::Integer message_days, ?reason: untyped?) -> untyped

    # Unbans a previously banned user from this server.
    # @param user [User, String, Integer] The user to unban.
    # @param reason [String] The reason the user is being unbanned.
    def unban: (untyped user, ?untyped? reason) -> untyped

    # Kicks a user from this server.
    # @param user [User, String, Integer] The user to kick.
    # @param reason [String] The reason the user is being kicked.
    def kick: (untyped user, ?untyped? reason) -> untyped

    # Forcibly moves a user into a different voice channel. Only works if the bot has the permission needed.
    # @param user [User, String, Integer] The user to move.
    # @param channel [Channel, String, Integer] The voice channel to move into.
    def move: (untyped user, untyped channel) -> untyped

    # Deletes this server. Be aware that this is permanent and impossible to undo, so be careful!
    def delete: () -> untyped

    # Leave the server.
    def leave: () -> untyped

    # Transfers server ownership to another user.
    # @param user [User, String, Integer] The user who should become the new owner.
    def owner=: (untyped user) -> untyped

    # Sets the server's name.
    # @param name [String] The new server name.
    def name=: (untyped name) -> untyped

    # @return [Array<VoiceRegion>] collection of available voice regions to this guild
    def available_voice_regions: () -> untyped

    # @return [VoiceRegion, nil] voice region data for this server's region
    # @note This may return `nil` if this server's voice region is deprecated.
    def region: () -> untyped

    # Moves the server to another region. This will cause a voice interruption of at most a second.
    # @param region [String] The new region the server should be in.
    def region=: (untyped region) -> untyped

    # Sets the server's icon.
    # @param icon [String, #read] The new icon, in base64-encoded JPG format.
    def icon=: (untyped icon) -> untyped

    # Sets the server's AFK channel.
    # @param afk_channel [Channel, nil] The new AFK channel, or `nil` if there should be none set.
    def afk_channel=: (untyped afk_channel) -> untyped

    # Sets the server's system channel.
    # @param system_channel [Channel, String, Integer, nil] The new system channel, or `nil` should it be disabled.
    def system_channel=: (untyped system_channel) -> untyped

    # Sets the amount of time after which a user gets moved into the AFK channel.
    # @param afk_timeout [Integer] The AFK timeout, in seconds.
    def afk_timeout=: (untyped afk_timeout) -> untyped

    # A map of possible server verification levels to symbol names
    VERIFICATION_LEVELS: { none: 0, low: 1, medium: 2, high: 3, very_high: 4 }

    # @return [Symbol] the verification level of the server (:none = none, :low = 'Must have a verified email on their Discord account', :medium = 'Has to be registered with Discord for at least 5 minutes', :high = 'Has to be a member of this server for at least 10 minutes', :very_high = 'Must have a verified phone on their Discord account').
    def verification_level: () -> untyped

    # Sets the verification level of the server
    # @param level [Integer, Symbol] The verification level from 0-4 or Symbol (see {VERIFICATION_LEVELS})
    def verification_level=: (untyped level) -> untyped

    # A map of possible message notification levels to symbol names
    NOTIFICATION_LEVELS: { all_messages: 0, only_mentions: 1 }

    # @return [Symbol] the default message notifications settings of the server (:all = 'All messages', :mentions = 'Only @mentions').
    def default_message_notifications: () -> untyped

    # Sets the default message notification level
    # @param notification_level [Integer, Symbol] The default message notification 0-1 or Symbol (see {NOTIFICATION_LEVELS})
    def default_message_notifications=: (untyped notification_level) -> untyped

    alias notification_level= default_message_notifications=

    # Sets the server splash
    # @param splash_hash [String] The splash hash
    def splash=: (untyped splash_hash) -> untyped

    # A map of possible content filter levels to symbol names
    FILTER_LEVELS: { disabled: 0, members_without_roles: 1, all_members: 2 }

    # @return [Symbol] the explicit content filter level of the server (:none = 'Don't scan any messages.', :exclude_roles = 'Scan messages for members without a role.', :all = 'Scan messages sent by all members.').
    def explicit_content_filter: () -> untyped

    alias content_filter_level explicit_content_filter

    # Sets the server content filter.
    # @param filter_level [Integer, Symbol] The content filter from 0-2 or Symbol (see {FILTER_LEVELS})
    def explicit_content_filter=: (untyped filter_level) -> untyped

    # @return [true, false] whether this server has any emoji or not.
    def any_emoji?: () -> untyped

    alias has_emoji? any_emoji?

    alias emoji? any_emoji?

    # Requests a list of Webhooks on the server.
    # @return [Array<Webhook>] webhooks on the server.
    def webhooks: () -> untyped

    # Requests a list of Invites to the server.
    # @return [Array<Invite>] invites to the server.
    def invites: () -> untyped

    # Processes a GUILD_MEMBERS_CHUNK packet, specifically the members field
    # @note For internal use only
    # @!visibility private
    def process_chunk: (untyped members, untyped chunk_index, untyped chunk_count) -> (nil | untyped)

    # @return [Channel, nil] the AFK voice channel of this server, or `nil` if none is set.
    def afk_channel: () -> (untyped | nil)

    # @return [Channel, nil] the system channel (used for automatic welcome messages) of a server, or `nil` if none is set.
    def system_channel: () -> (untyped | nil)

    # Updates the cached data with new data
    # @note For internal use only
    # @!visibility private
    def update_data: (?untyped? new_data) -> untyped

    # Adds a channel to this server's cache
    # @note For internal use only
    # @!visibility private
    def add_channel: (untyped channel) -> untyped

    # Deletes a channel from this server's cache
    # @note For internal use only
    # @!visibility private
    def delete_channel: (untyped id) -> untyped

    # Updates the cached emoji data with new data
    # @note For internal use only
    # @!visibility private
    def update_emoji_data: (untyped new_data) -> untyped

    # The inspect method is overwritten to give more useful output
    def inspect: () -> ::String

    private

    def update_server_data: (untyped new_data) -> untyped

    def process_roles: (untyped roles) -> (nil | untyped)

    def process_emoji: (untyped emoji) -> (nil | untyped)

    def process_members: (untyped members) -> (nil | untyped)

    def process_presences: (untyped presences) -> (nil | untyped)

    def process_channels: (untyped channels) -> (nil | untyped)

    def process_voice_states: (untyped voice_states) -> (nil | untyped)
  end

  # A ban entry on a server
  class ServerBan
    # @return [String, nil] the reason the user was banned, if provided
    attr_reader reason: untyped

    # @return [User] the user that was banned
    attr_reader user: untyped

    # @return [Server] the server this ban belongs to
    attr_reader server: untyped

    # @!visibility private
    def initialize: (untyped server, untyped user, untyped reason) -> void

    # Removes this ban on the associated user in the server
    # @param reason [String] the reason for removing the ban
    def remove: (?untyped? reason) -> untyped

    alias unban remove

    alias lift remove
  end
end
