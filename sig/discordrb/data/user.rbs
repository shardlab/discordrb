module Discordrb
  # Mixin for the attributes users should have
  module UserAttributes
    # @return [String] this user's username
    attr_reader username: untyped

    alias name username

    # @return [String] this user's discriminator which is used internally to identify users with identical usernames.
    attr_reader discriminator: untyped

    alias discrim discriminator

    alias tag discriminator

    alias discord_tag discriminator

    # @return [true, false] whether this user is a Discord bot account
    attr_reader bot_account: untyped

    alias bot_account? bot_account

    # @return [String] the ID of this user's current avatar, can be used to generate an avatar URL.
    # @see #avatar_url
    attr_accessor avatar_id: untyped

    # Utility function to mention users in messages
    # @return [String] the mention code in the form of <@id>
    def mention: () -> ::String

    # Utility function to get Discord's distinct representation of a user, i.e. username + discriminator
    # @return [String] distinct representation of user
    def distinct: () -> ::String

    # Utility function to get a user's avatar URL.
    # @param format [String, nil] If `nil`, the URL will default to `webp` for static avatars, and will detect if the user has a `gif` avatar. You can otherwise specify one of `webp`, `jpg`, `png`, or `gif` to override this. Will always be PNG for default avatars.
    # @return [String] the URL to the avatar image.
    def avatar_url: (?untyped? format) -> untyped
  end

  # User on Discord, including internal data like discriminators
  class User
    include IDObject

    include UserAttributes

    # @return [Symbol] the current online status of the user (`:online`, `:offline` or `:idle`)
    attr_reader status: untyped

    # @return [ActivitySet] the activities of the user
    attr_reader activities: untyped

    # @return [Hash<Symbol, Symbol>] the current online status (`:online`, `:idle` or `:dnd`) of the user
    #   on various device types (`:desktop`, `:mobile`, or `:web`). The value will be `nil` if the user is offline or invisible.
    attr_reader client_status: untyped

    # @!visibility private
    def initialize: (untyped data, untyped `bot`) -> void

    # Get a user's PM channel or send them a PM
    # @overload pm
    #   Creates a private message channel for this user or returns an existing one if it already exists
    #   @return [Channel] the PM channel to this user.
    # @overload pm(content)
    #   Sends a private to this user.
    #   @param content [String] The content to send.
    #   @return [Message] the message sent to this user.
    def pm: (?untyped? content) -> untyped

    alias dm pm

    # Send the user a file.
    # @param file [File] The file to send to the user
    # @param caption [String] The caption of the file being sent
    # @param filename [String] Overrides the filename of the uploaded file
    # @param spoiler [true, false] Whether or not this file should appear as a spoiler.
    # @return [Message] the message sent to this user.
    # @example Send a file from disk
    #   user.send_file(File.open('rubytaco.png', 'r'))
    def send_file: (untyped file, ?untyped? caption, ?filename: untyped?, ?spoiler: untyped?) -> untyped

    # Set the user's name
    # @note for internal use only
    # @!visibility private
    def update_username: (untyped username) -> untyped

    # Set the user's presence data
    # @note for internal use only
    # @!visibility private
    def update_presence: (untyped data) -> untyped

    # Add an await for a message from this user. Specifically, this adds a global await for a MessageEvent with this
    # user's ID as a :from attribute.
    # @see Bot#add_await
    def await: (untyped key, ?::Hash[untyped, untyped] attributes) ?{ () -> untyped } -> untyped

    # Add a blocking await for a message from this user. Specifically, this adds a global await for a MessageEvent with this
    # user's ID as a :from attribute.
    # @see Bot#add_await!
    def await!: (?::Hash[untyped, untyped] attributes) ?{ () -> untyped } -> untyped

    # Gets the member this user is on a server
    # @param server [Server] The server to get the member for
    # @return [Member] this user as a member on a particular server
    def on: (untyped server) -> untyped

    # Is the user the bot?
    # @return [true, false] whether this user is the bot
    def current_bot?: () -> untyped

    # @return [true, false] whether this user is a fake user for a webhook message
    def webhook?: () -> untyped

    # @!visibility private
    def process_client_status: (untyped client_status) -> untyped

    # @return [String, nil] the game the user is currently playing, or `nil` if nothing is being played.
    # @deprecated Please use {ActivitySet#games} for information about the user's game activity
    def game: () -> untyped

    # @return [Integer] returns 1 for twitch streams, or 0 for no stream.
    # @deprecated Please use {ActivitySet#streaming} for information about the user's stream activity
    def stream_type: () -> (1 | 0)

    # @return [String, nil] the URL to the stream, if the user is currently streaming something
    # @deprecated Please use {ActivitySet#streaming} for information about the user's stream activity
    def stream_url: () -> untyped

    # The inspect method is overwritten to give more useful output
    def inspect: () -> ::String
  end
end
