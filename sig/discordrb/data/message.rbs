module Discordrb
  # A message on Discord that was sent to a text channel
  class Message
    include IDObject

    # @return [String] the content of this message.
    attr_reader content: untyped

    @referenced_message: Discordrb::Message?

    alias text content

    alias to_s content

    # @return [Member, User] the user that sent this message. (Will be a {Member} most of the time, it should only be a
    #   {User} for old messages when the author has left the server since then)
    attr_reader author: untyped

    alias user author

    alias writer author

    # @return [Channel] the channel in which this message was sent.
    attr_reader channel: untyped

    # @return [Time] the timestamp at which this message was sent.
    attr_reader timestamp: untyped

    # @return [Time] the timestamp at which this message was edited. `nil` if the message was never edited.
    attr_reader edited_timestamp: untyped

    alias edit_timestamp edited_timestamp

    # @return [Array<User>] the users that were mentioned in this message.
    attr_reader mentions: untyped

    # @return [Array<Role>] the roles that were mentioned in this message.
    attr_reader role_mentions: untyped

    # @return [Array<Attachment>] the files attached to this message.
    attr_reader attachments: untyped

    # @return [Array<Embed>] the embed objects contained in this message.
    attr_reader embeds: untyped

    # @return [Array<Reaction>] the reaction objects contained in this message.
    attr_reader reactions: untyped

    # @return [true, false] whether the message used Text-To-Speech (TTS) or not.
    attr_reader tts: untyped

    alias tts? tts

    # @return [String] used for validating a message was sent.
    attr_reader nonce: untyped

    # @return [true, false] whether the message was edited or not.
    attr_reader edited: untyped

    alias edited? edited

    # @return [true, false] whether the message mentioned everyone or not.
    attr_reader mention_everyone: untyped

    alias mention_everyone? mention_everyone

    alias mentions_everyone? mention_everyone

    # @return [true, false] whether the message is pinned or not.
    attr_reader pinned: untyped

    alias pinned? pinned

    # @return [Server, nil] the server in which this message was sent.
    attr_reader server: untyped

    # @return [Integer, nil] the webhook ID that sent this message, or `nil` if it wasn't sent through a webhook.
    attr_reader webhook_id: untyped

    # @return [Array<Component>]
    attr_reader components: untyped

    # The discriminator that webhook user accounts have.
    ZERO_DISCRIM: "0000"

    # @!visibility private
    def initialize: (untyped data, untyped `bot`) -> void

    # Replies to this message with the specified content.
    # @deprecated Please use {#respond}.
    # @param content [String] The content to send. Should not be longer than 2000 characters or it will result in an error.
    # @return (see #respond)
    # @see Channel#send_message
    def reply: (untyped content) -> untyped

    # Responds to this message as an inline reply.
    # @param content [String] The content to send. Should not be longer than 2000 characters or it will result in an error.
    # @param tts [true, false] Whether or not this message should be sent using Discord text-to-speech.
    # @param embed [Hash, Discordrb::Webhooks::Embed, nil] The rich embed to append to this message.
    # @param attachments [Array<File>] Files that can be referenced in embeds via `attachment://file.png`
    # @param allowed_mentions [Hash, Discordrb::AllowedMentions, false, nil] Mentions that are allowed to ping on this message. `false` disables all pings
    # @param mention_user [true, false] Whether the user that is being replied to should be pinged by the reply.
    # @param components [View, Array<Hash>] Interaction components to associate with this message.
    # @return (see #respond)
    def reply!: (untyped content, ?tts: bool, ?embed: untyped?, ?attachments: untyped?, ?allowed_mentions: ::Hash[untyped, untyped], ?mention_user: bool, ?components: untyped?) -> untyped

    # (see Channel#send_message)
    def respond: (untyped content, ?bool tts, ?untyped? embed, ?untyped? attachments, ?untyped? allowed_mentions, ?untyped? message_reference, ?untyped? components) -> untyped

    # Edits this message to have the specified content instead.
    # You can only edit your own messages.
    # @param new_content [String] the new content the message should have.
    # @param new_embed [Hash, Discordrb::Webhooks::Embed, nil] The new embed the message should have. If `nil` the message will be changed to have no embed.
    # @return [Message] the resulting message.
    def edit: (untyped new_content, ?untyped? new_embed, ?untyped? components) -> untyped

    # Deletes this message.
    def delete: (?untyped? reason) -> nil

    # Pins this message
    def pin: (?untyped? reason) -> nil

    # Unpins this message
    def unpin: (?untyped? reason) -> nil

    # Add an {Await} for a message with the same user and channel.
    # @see Bot#add_await
    # @deprecated Will be changed to blocking behavior in v4.0. Use {#await!} instead.
    def await: (untyped key, ?::Hash[untyped, untyped] attributes) ?{ () -> untyped } -> untyped

    # Add a blocking {Await} for a message with the same user and channel.
    # @see Bot#add_await!
    def await!: (?::Hash[untyped, untyped] attributes) ?{ () -> untyped } -> untyped

    # Add an {Await} for a reaction to be added on this message.
    # @see Bot#add_await
    # @deprecated Will be changed to blocking behavior in v4.0. Use {#await_reaction!} instead.
    def await_reaction: (untyped key, ?::Hash[untyped, untyped] attributes) ?{ () -> untyped } -> untyped

    # Add a blocking {Await} for a reaction to be added on this message.
    # @see Bot#add_await!
    def await_reaction!: (?::Hash[untyped, untyped] attributes) ?{ () -> untyped } -> untyped

    # @return [true, false] whether this message was sent by the current {Bot}.
    def from_bot?: () -> untyped

    # @return [true, false] whether this message has been sent over a webhook.
    def webhook?: () -> untyped

    # @return [Array<Emoji>] the emotes that were used/mentioned in this message.
    def emoji: () -> (nil | untyped)

    # Check if any emoji were used in this message.
    # @return [true, false] whether or not any emoji were used
    def emoji?: () -> untyped

    # Check if any reactions were used in this message.
    # @return [true, false] whether or not this message has reactions
    def reactions?: () -> untyped

    # Returns the reactions made by the current bot or user.
    # @return [Array<Reaction>] the reactions
    def my_reactions: () -> untyped

    # Reacts to a message.
    # @param reaction [String, #to_reaction] the unicode emoji or {Emoji}
    def create_reaction: (untyped reaction) -> nil

    alias react create_reaction

    # Returns the list of users who reacted with a certain reaction.
    # @param reaction [String, #to_reaction] the unicode emoji or {Emoji}
    # @param limit [Integer] the limit of how many users to retrieve. `nil` will return all users
    # @example Get all the users that reacted with a thumbs up.
    #   thumbs_up_reactions = message.reacted_with("\u{1F44D}")
    # @return [Array<User>] the users who used this reaction
    def reacted_with: (untyped reaction, ?limit: ::Integer) -> untyped

    # Returns a hash of all reactions to a message as keys and the users that reacted to it as values.
    # @param limit [Integer] the limit of how many users to retrieve per distinct reaction emoji. `nil` will return all users
    # @example Get all the users that reacted to a message for a giveaway.
    #   giveaway_participants = message.all_reaction_users
    # @return [Hash<String => Array<User>>] A hash mapping the string representation of a
    #   reaction to an array of users.
    def all_reaction_users: (?limit: ::Integer) -> untyped

    # Deletes a reaction made by a user on this message.
    # @param user [User, String, Integer] the user or user ID who used this reaction
    # @param reaction [String, #to_reaction] the reaction to remove
    def delete_reaction: (untyped user, untyped reaction) -> untyped

    # Deletes this client's reaction on this message.
    # @param reaction [String, #to_reaction] the reaction to remove
    def delete_own_reaction: (untyped reaction) -> untyped

    # Removes all reactions from this message.
    def delete_all_reactions: () -> untyped

    # The inspect method is overwritten to give more useful output
    def inspect: () -> ::String

    # @return [String] a URL that a user can use to navigate to this message in the client
    def link: () -> ::String

    alias jump_link link

    # Whether or not this message was sent in reply to another message
    # @return [true, false]
    def reply?: () -> untyped

    # @return [Message, nil] the Message this Message was sent in reply to.
    def referenced_message: () -> (untyped | nil)

    # @return [Array<Components::Button>]
    def buttons: () -> untyped
  end
end
