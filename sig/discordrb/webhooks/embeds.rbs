module Discordrb::Webhooks
  # An embed is a multipart-style attachment to a webhook message that can have a variety of different purposes and
  # appearances.
  class Embed
    def initialize: (?title: untyped?, ?description: untyped?, ?url: untyped?, ?timestamp: untyped?, ?colour: untyped?, ?color: untyped?, ?footer: untyped?, ?image: untyped?, ?thumbnail: untyped?, ?video: untyped?, ?provider: untyped?, ?author: untyped?, ?fields: untyped) -> void

    # @return [String, nil] title of the embed that will be displayed above everything else.
    attr_accessor title: untyped

    # @return [String, nil] description for this embed
    attr_accessor description: untyped

    # @return [String, nil] URL the title should point to
    attr_accessor url: untyped

    # @return [Time, nil] timestamp for this embed. Will be displayed just below the title.
    attr_accessor timestamp: untyped

    # @return [Integer, nil] the colour of the bar to the side, in decimal form
    attr_reader colour: untyped

    alias color colour

    # Sets the colour of the bar to the side of the embed to something new.
    # @param value [String, Integer, {Integer, Integer, Integer}, #to_i, nil] The colour in decimal, hexadecimal, R/G/B decimal, or nil to clear the embeds colour
    #   form.
    def colour=: (untyped value) -> untyped

    alias color= colour=

    # @example Add a footer to an embed
    #   embed.footer = Discordrb::Webhooks::EmbedFooter.new(text: 'Hello', icon_url: 'https://i.imgur.com/j69wMDu.jpg')
    # @return [EmbedFooter, nil] footer for this embed
    attr_accessor footer: untyped

    # @see EmbedImage
    # @example Add a image to an embed
    #   embed.image = Discordrb::Webhooks::EmbedImage.new(url: 'https://i.imgur.com/PcMltU7.jpg')
    # @return [EmbedImage, nil] image for this embed
    attr_accessor image: untyped

    # @see EmbedThumbnail
    # @example Add a thumbnail to an embed
    #   embed.thumbnail = Discordrb::Webhooks::EmbedThumbnail.new(url: 'https://i.imgur.com/xTG3a1I.jpg')
    # @return [EmbedThumbnail, nil] thumbnail for this embed
    attr_accessor thumbnail: untyped

    # @see EmbedAuthor
    # @example Add a author to an embed
    #   embed.author = Discordrb::Webhooks::EmbedAuthor.new(name: 'meew0', url: 'https://github.com/meew0', icon_url: 'https://avatars2.githubusercontent.com/u/3662915?v=3&s=466')
    # @return [EmbedAuthor, nil] author for this embed
    attr_accessor author: untyped

    # Add a field object to this embed.
    # @param field [EmbedField] The field to add.
    def <<: (untyped field) -> untyped

    # Convenience method to add a field to the embed without having to create one manually.
    # @see EmbedField
    # @example Add a field to an embed, conveniently
    #   embed.add_field(name: 'A field', value: "The field's content")
    # @param name [String] The field's name
    # @param value [String] The field's value
    # @param inline [true, false] Whether the field should be inline
    def add_field: (?name: untyped?, ?value: untyped?, ?inline: untyped?) -> untyped

    # @return [Array<EmbedField>] the fields attached to this embed.
    attr_accessor fields: untyped

    # @return [Hash] a hash representation of this embed, to be converted to JSON.
    def to_hash: () -> { title: untyped, description: untyped, url: untyped, timestamp: untyped, color: untyped, footer: untyped, image: untyped, thumbnail: untyped, video: untyped, provider: untyped, author: untyped, fields: untyped }
  end

  # An embed's footer will be displayed at the very bottom of an embed, together with the timestamp. An icon URL can be
  # set together with some text to be displayed.
  class EmbedFooter
    # @return [String, nil] text to be displayed in the footer
    attr_accessor text: untyped

    # @return [String, nil] URL to an icon to be showed alongside the text
    attr_accessor icon_url: untyped

    # Creates a new footer object.
    # @param text [String, nil] The text to be displayed in the footer.
    # @param icon_url [String, nil] The URL to an icon to be showed alongside the text.
    def initialize: (?text: untyped?, ?icon_url: untyped?) -> void

    # @return [Hash] a hash representation of this embed footer, to be converted to JSON.
    def to_hash: () -> { text: untyped, icon_url: untyped }
  end

  # An embed's image will be displayed at the bottom, in large format. It will replace a footer icon URL if one is set.
  class EmbedImage
    # @return [String, nil] URL of the image
    attr_accessor url: untyped

    # Creates a new image object.
    # @param url [String, nil] The URL of the image.
    def initialize: (?url: untyped?) -> void

    # @return [Hash] a hash representation of this embed image, to be converted to JSON.
    def to_hash: () -> { url: untyped }
  end

  # An embed's thumbnail will be displayed at the right of the message, next to the description and fields. When clicked
  # it will point to the embed URL.
  class EmbedThumbnail
    # @return [String, nil] URL of the thumbnail
    attr_accessor url: untyped

    # Creates a new thumbnail object.
    # @param url [String, nil] The URL of the thumbnail.
    def initialize: (?url: untyped?) -> void

    # @return [Hash] a hash representation of this embed thumbnail, to be converted to JSON.
    def to_hash: () -> { url: untyped }
  end

  # An embed's author will be shown at the top to indicate who "authored" the particular event the webhook was sent for.
  class EmbedAuthor
    # @return [String, nil] name of the author
    attr_accessor name: untyped

    # @return [String, nil] URL the name should link to
    attr_accessor url: untyped

    # @return [String, nil] URL of the icon to be displayed next to the author
    attr_accessor icon_url: untyped

    # Creates a new author object.
    # @param name [String, nil] The name of the author.
    # @param url [String, nil] The URL the name should link to.
    # @param icon_url [String, nil] The URL of the icon to be displayed next to the author.
    def initialize: (?name: untyped?, ?url: untyped?, ?icon_url: untyped?) -> void

    # @return [Hash] a hash representation of this embed author, to be converted to JSON.
    def to_hash: () -> { name: untyped, url: untyped, icon_url: untyped }
  end

  # A field is a small block of text with a header that can be relatively freely layouted with other fields.
  class EmbedField
    # @return [String, nil] name of the field, displayed in bold at the top of the field.
    attr_accessor name: untyped

    # @return [String, nil] value of the field, displayed in normal text below the name.
    attr_accessor value: untyped

    # @return [true, false] whether the field should be displayed inline with other fields.
    attr_accessor inline: untyped

    # Creates a new field object.
    # @param name [String, nil] The name of the field, displayed in bold at the top of the field.
    # @param value [String, nil] The value of the field, displayed in normal text below the name.
    # @param inline [true, false] Whether the field should be displayed inline with other fields.
    def initialize: (?name: untyped?, ?value: untyped?, ?inline: bool) -> void

    # @return [Hash] a hash representation of this embed field, to be converted to JSON.
    def to_hash: () -> { name: untyped, value: untyped, inline: untyped }
  end
end
