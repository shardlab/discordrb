# A reusable view representing a component collection, with builder methods.
class Discordrb::Webhooks::View
  # Possible button style names and values.
  BUTTON_STYLES: ::Hash[::Symbol, ::Integer]

  # Component types.
  # @see https://discord.com/developers/docs/interactions/message-components#component-types
  COMPONENT_TYPES: ::Hash[::Symbol, ::Integer]

  # This builder is used when constructing an ActionRow. All current components must be within an action row, but this can
  # change in the future. A message can have 5 action rows, each action row can hold a weight of 5. Buttons have a weight of 1,
  # and dropdowns have a weight of 5.
  class RowBuilder
    @components: untyped

    # @!visibility private
    def initialize: () -> void

    # Add a button to this action row.
    # @param style [Symbol, Integer] The button's style type. See {BUTTON_STYLES}
    # @param label [String, nil] The text label for the button. Either a label or emoji must be provided.
    # @param emoji [#to_h, String, Integer] An emoji ID, or unicode emoji to attach to the button. Can also be a object
    #   that responds to `#to_h` which returns a hash in the format of `{ id: Integer, name: string }`.
    # @param custom_id [String] Custom IDs are used to pass state to the events that are raised from interactions.
    #   There is a limit of 100 characters to each custom_id.
    # @param disabled [true, false] Whether this button is disabled and shown as greyed out.
    # @param url [String, nil] The URL, when using a link style button.
    def button: (style: untyped, ?label: untyped?, ?emoji: untyped?, ?custom_id: untyped?, ?disabled: untyped?, ?url: untyped?) -> untyped

    # Add a select menu to this action row.
    # @param custom_id [String] Custom IDs are used to pass state to the events that are raised from interactions.
    #   There is a limit of 100 characters to each custom_id.
    # @param options [Array<Hash>] Options that can be selected in this menu. Can also be provided via the yielded builder.
    # @param placeholder [String, nil] Default text to show when no entries are selected.
    # @param min_values [Integer, nil] The minimum amount of values a user must select.
    # @param max_values [Integer, nil] The maximum amount of values a user can select.
    # @yieldparam builder [SelectMenuBuilder]
    def select_menu: (custom_id: untyped, ?options: untyped, ?placeholder: untyped?, ?min_values: untyped?, ?max_values: untyped?) { (untyped) -> untyped } -> untyped

    # @!visibility private
    def to_h: () -> { type: untyped, components: untyped }
  end

  # A builder to assist in adding options to select menus.
  class SelectMenuBuilder
    @min_values: untyped?
    @placeholder: untyped?
    @options: ::Array[untyped?]
    @custom_id: untyped
    # @!visibility hidden
    def initialize: (untyped custom_id, ?untyped options, ?untyped? placeholder, ?untyped? min_values, ?untyped? max_values) -> void

    # Add an option to this select menu.
    # @param label [String] The title of this option.
    # @param value [String] The value that this option represents.
    # @param description [String, nil] An optional description of the option.
    # @param emoji [#to_h, String, Integer] An emoji ID, or unicode emoji to attach to the button. Can also be a object
    #   that responds to `#to_h` which returns a hash in the format of `{ id: Integer, name: string }`.
    # @param default [true, false, nil] Whether this is the default selected option.
    def option: (label: untyped, value: untyped, ?description: untyped?, ?emoji: untyped?, ?default: untyped?) -> untyped

    # @!visibility private
    def to_h: () -> { type: untyped, options: untyped, placeholder: untyped, min_values: untyped, max_values: untyped, custom_id: untyped }
  end

  attr_reader rows: untyped

  def initialize: () { (untyped) -> untyped } -> void

  # Add a new ActionRow to the view
  # @yieldparam [RowBuilder]
  def row: () { (untyped) -> untyped } -> untyped

  # @!visibility private
  def to_a: () -> untyped
end
